import {InstructionConfig} from "./InstructionConfig";

const instructions: {
  [k: string]: InstructionConfig;
} = {
  "0000": {
    instruction: "Halt",
    mnemonic: "HLT",
    cycles: [],
    interruptable: false,
  },
  "0001": {
    instruction: "Set Double Byte Data",
    mnemonic: "SDBD",
    cycles: [4],
    interruptable: false,
    out_d: true,
  },
  "0002": {
    instruction: "Enable Interrupt System",
    mnemonic: "EIS",
    cycles: [4],
    interruptable: false,
    out_i: true,
  },
  "0003": {
    instruction: "Disable Interrupt System",
    mnemonic: "DIS",
    cycles: [4],
    interruptable: false,
    out_i: true,
  },
  "0004": {
    instruction: "Unconditional Jump",
    mnemonic: "J",
    cycles: [12],
    interruptable: true,
  },
  "0005": {
    instruction: "Terminate Current Interrupt",
    mnemonic: "TCI",
    cycles: [4],
    interruptable: false,
  },
  "0006": {
    instruction: "Clear Carry",
    mnemonic: "CLRC",
    cycles: [4],
    interruptable: false,
    out_c: true,
  },
  "0007": {
    instruction: "Set Carry",
    mnemonic: "SETC",
    cycles: [4],
    interruptable: false,
    out_c: true,
  },
  "0008-000f": {
    instruction: "Increment Register",
    mnemonic: "INCR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "0010-0017": {
    instruction: "Decrement Register",
    mnemonic: "DECR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "0018-001f": {
    instruction: "Complement Register",
    mnemonic: "COMR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "0020-0027": {
    instruction: "Negate Register",
    mnemonic: "NEGR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0028-002f": {
    instruction: "Add Carry to Register",
    mnemonic: "ADCR",
    cycles: [6],
    interruptable: true,
    in_c: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0030-0033": {
    instruction: "Get the Status Word",
    mnemonic: "GSWD",
    cycles: [6],
    // Intellivision Wiki docs say this is interruptable, but jzIntv says
    // otherwise
    //
    // interruptable: true,
    interruptable: false,
    in_s: true,
    in_z: true,
    in_o: true,
    in_c: true,
  },
  "0034-0035": {
    instruction: "No Operation",
    mnemonic: "NOP",
    cycles: [6],
    interruptable: true,
  },
  "0036-0037": {
    instruction: "Software Interrupt",
    mnemonic: "SIN",
    cycles: [6],
    interruptable: true,
  },
  "0038-003f": {
    instruction: "Return Status Word",
    mnemonic: "RSWD",
    cycles: [6],
    // Intellivision Wiki docs say this is interruptable, but jzIntv says
    // otherwise
    //
    // interruptable: true,
    interruptable: false,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0040-0047": {
    instruction: "Swap Bytes",
    mnemonic: "SWAP",
    cycles: [6, 8],
    interruptable: false,
    out_s: true,
    out_z: true,
  },
  "0048-004f": {
    instruction: "Shift Logical Left",
    mnemonic: "SLL",
    cycles: [6, 8],
    interruptable: false,
    out_s: true,
    out_z: true,
  },
  "0050-0057": {
    instruction: "Rotate Left through Carry",
    mnemonic: "RLC",
    cycles: [6, 8],
    interruptable: false,
    in_o: true,
    in_c: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0058-005f": {
    instruction: "Shift Logical Left through Carry",
    mnemonic: "SLLC",
    cycles: [6, 8],
    interruptable: false,
    in_o: true,
    in_c: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0060-0067": {
    instruction: "Shift Logical Right",
    mnemonic: "SLR",
    cycles: [6, 8],
    interruptable: false,
    out_s: true,
    out_z: true,
  },
  "0068-006f": {
    instruction: "Shift Arithmetic Right",
    mnemonic: "SAR",
    cycles: [6, 8],
    interruptable: false,
    out_s: true,
    out_z: true,
  },
  "0070-0077": {
    instruction: "Rotate Right through Carry",
    mnemonic: "RRC",
    cycles: [6, 8],
    interruptable: false,
    in_o: true,
    in_c: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0078-007f": {
    instruction: "Shift Arithmetic Right through Carry",
    mnemonic: "SARC",
    cycles: [6, 8],
    interruptable: false,
    in_o: true,
    in_c: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0080-00bf": {
    instruction: "Move Register",
    mnemonic: "MOVR",
    cycles: [6, 7],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "00c0-00ff": {
    instruction: "Add Registers",
    mnemonic: "ADDR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0100-013f": {
    instruction: "Subtract Registers",
    mnemonic: "SUBR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0140-017f": {
    instruction: "Compare Registers",
    mnemonic: "CMPR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0180-01bf": {
    instruction: "And Registers",
    mnemonic: "ANDR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "01c0-01ff": {
    instruction: "Xor Registers",
    mnemonic: "XORR",
    cycles: [6],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "0200-023f": {
    instruction: "Unconditional Branch",
    mnemonic: "B",
    cycles: [9],
    interruptable: true,
  },
  "0240-0247": {
    instruction: "Move Out",
    mnemonic: "MVO",
    cycles: [11],
    interruptable: false,
  },
  "0248-026f": {
    instruction: "Move Out Indirect",
    mnemonic: "MVO@",
    cycles: [9],
    interruptable: false,
    in_d: true,
  },
  "0270-027f": {
    instruction: "Move Out Immediate",
    mnemonic: "MVOI",
    cycles: [9],
    interruptable: false,
    in_d: true,
  },
  "0280-0287": {
    instruction: "Move In",
    mnemonic: "MVI",
    cycles: [10],
    interruptable: true,
  },
  "0288-02af": {
    instruction: "Move In Indirect",
    mnemonic: "MVI@",
    cycles: [8, 10, 11],
    interruptable: true,
    in_d: true,
  },
  "02b0-02bf": {
    instruction: "Move In Immediate",
    mnemonic: "MVII",
    cycles: [8, 10],
    interruptable: true,
    in_d: true,
  },
  "02c0-02c7": {
    instruction: "Add",
    mnemonic: "ADD",
    cycles: [10],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "02c8-02ef": {
    instruction: "Add Indirect",
    mnemonic: "ADD@",
    cycles: [8, 10, 11],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "02f0-02ff": {
    instruction: "Add Immediate",
    mnemonic: "ADDI",
    cycles: [8, 10],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0300-0307": {
    instruction: "Subtract",
    mnemonic: "SUB",
    cycles: [10],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0308-032f": {
    instruction: "Subtract Indirect",
    mnemonic: "SUB@",
    cycles: [8, 10, 11],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0330-033f": {
    instruction: "Subtract Immediate",
    mnemonic: "SUBI",
    cycles: [8, 10],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0340-0347": {
    instruction: "Compare",
    mnemonic: "CMP",
    cycles: [10],
    interruptable: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0348-036f": {
    instruction: "Compare Indirect",
    mnemonic: "CMP@",
    cycles: [8, 10, 11],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0370-037f": {
    instruction: "Compare Immediate",
    mnemonic: "CMPI",
    cycles: [8, 10],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
    out_o: true,
    out_c: true,
  },
  "0380-0387": {
    instruction: "And",
    mnemonic: "AND",
    cycles: [10],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "0388-03af": {
    instruction: "And Indirect",
    mnemonic: "AND@",
    cycles: [8, 10, 11],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
  },
  "03b0-03bf": {
    instruction: "And Immediate",
    mnemonic: "ANDI",
    cycles: [8, 10],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
  },
  "03c0-03c7": {
    instruction: "Xor",
    mnemonic: "XOR",
    cycles: [10],
    interruptable: true,
    out_s: true,
    out_z: true,
  },
  "03c8-03ef": {
    instruction: "Xor Indirect",
    mnemonic: "XOR@",
    cycles: [8, 10, 11],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
  },
  "03f0-03ff": {
    instruction: "Xor Immediate",
    mnemonic: "XORI",
    cycles: [8, 10],
    interruptable: true,
    in_d: true,
    out_s: true,
    out_z: true,
  },
} as const;

export default instructions;
