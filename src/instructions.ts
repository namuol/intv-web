export default {
  "0000": {HLT: {instruction: "Halt", cycles: [], interruptible: false}},
  "0001": {
    SDBD: {
      instruction: "Set Double Byte Data",
      cycles: [4],
      interruptible: false,
      out_d: true,
    },
  },
  "0002": {
    EIS: {
      instruction: "Enable Interrupt System",
      cycles: [4],
      interruptible: false,
      out_i: true,
    },
  },
  "0003": {
    DIS: {
      instruction: "Disable Interrupt System",
      cycles: [4],
      interruptible: false,
      out_i: true,
    },
  },
  "0004": {
    J: {instruction: "Unconditional Jump", cycles: [12], interruptible: true},
    JE: {
      instruction: "Jump and Enable Interrupts",
      cycles: [12],
      interruptible: true,
      out_i: true,
    },
    JD: {
      instruction: "Jump and Disable Interrupts",
      cycles: [12],
      interruptible: true,
      out_i: true,
    },
    JSR: {instruction: "Jump to Subroutine", cycles: [12], interruptible: true},
    JSRE: {
      instruction: "Jump to Subroutine and Enable Interrupts",
      cycles: [12],
      interruptible: true,
      out_i: true,
    },
    JSRD: {
      instruction: "Jump to Subroutine and Disable Interrupts",
      cycles: [12],
      interruptible: true,
      out_i: true,
    },
  },
  "0005": {
    TCI: {
      instruction: "Terminate Current Interrupt",
      cycles: [4],
      interruptible: false,
    },
  },
  "0006": {
    CLRC: {
      instruction: "Clear Carry",
      cycles: [4],
      interruptible: false,
      out_c: true,
    },
  },
  "0007": {
    SETC: {
      instruction: "Set Carry",
      cycles: [4],
      interruptible: false,
      out_c: true,
    },
  },
  "0008-000f": {
    INCR: {
      instruction: "Increment Register",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "0010-0017": {
    DECR: {
      instruction: "Decrement Register",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "0018-001f": {
    COMR: {
      instruction: "Complement Register",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "0020-0027": {
    NEGR: {
      instruction: "Negate Register",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0028-002f": {
    ADCR: {
      instruction: "Add Carry to Register",
      cycles: [6],
      interruptible: true,
      in_c: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0030-0033": {
    GSWD: {
      instruction: "Get the Status Word",
      cycles: [6],
      interruptible: true,
      in_s: true,
      in_z: true,
      in_o: true,
      in_c: true,
    },
  },
  "0034-0035": {
    NOP: {instruction: "No Operation", cycles: [6], interruptible: true},
  },
  "0036-0037": {
    SIN: {instruction: "Software Interrupt", cycles: [6], interruptible: true},
  },
  "0038-003f": {
    RSWD: {
      instruction: "Return Status Word",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0040-0047": {
    SWAP: {
      instruction: "Swap Bytes",
      cycles: [6, 8],
      interruptible: false,
      out_s: true,
      out_z: true,
    },
  },
  "0048-004f": {
    SLL: {
      instruction: "Shift Logical Left",
      cycles: [6, 8],
      interruptible: false,
      out_s: true,
      out_z: true,
    },
  },
  "0050-0057": {
    RLC: {
      instruction: "Rotate Left through Carry",
      cycles: [6, 8],
      interruptible: false,
      in_o: true,
      in_c: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0058-005f": {
    SLLC: {
      instruction: "Shift Logical Left through Carry",
      cycles: [6, 8],
      interruptible: false,
      in_o: true,
      in_c: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0060-0067": {
    SLR: {
      instruction: "Shift Logical Right",
      cycles: [6, 8],
      interruptible: false,
      out_s: true,
      out_z: true,
    },
  },
  "0068-006f": {
    SAR: {
      instruction: "Shift Arithmetic Right",
      cycles: [6, 8],
      interruptible: false,
      out_s: true,
      out_z: true,
    },
  },
  "0070-0077": {
    RRC: {
      instruction: "Rotate Right through Carry",
      cycles: [6, 8],
      interruptible: false,
      in_o: true,
      in_c: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0078-007f": {
    SARC: {
      instruction: "Shift Arithmetic Right through Carry",
      cycles: [6, 8],
      interruptible: false,
      in_o: true,
      in_c: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0080-00bf": {
    MOVR: {
      instruction: "Move Register",
      cycles: [6, 7],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "00c0-00ff": {
    ADDR: {
      instruction: "Add Registers",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0100-013f": {
    SUBR: {
      instruction: "Subtract Registers",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0140-017f": {
    CMPR: {
      instruction: "Compare Registers",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0180-01bf": {
    ANDR: {
      instruction: "And Registers",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "01c0-01ff": {
    XORR: {
      instruction: "Xor Registers",
      cycles: [6],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "0200-023f": {
    B: {instruction: "Unconditional Branch", cycles: [9], interruptible: true},
    BC: {
      instruction: "Branch on Carry",
      cycles: [7, 9],
      interruptible: true,
      in_c: true,
    },
    BOV: {
      instruction: "Branch on Overflow",
      cycles: [7, 9],
      interruptible: true,
      in_o: true,
    },
    BPL: {
      instruction: "Branch on Plus",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
    },
    BEQ: {
      instruction: "Branch If Equal / Branch On Zero",
      cycles: [7, 9],
      interruptible: true,
      in_z: true,
    },
    BLT: {
      instruction: "Branch if Less Than / Branch if Not Greater or Equal",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
      in_o: true,
    },
    BLE: {
      instruction: "Branch if Less Than or Equal / Branch if Not Greater Than",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
      in_z: true,
      in_o: true,
    },
    BUSC: {
      instruction: "Branch on Unequal Sign and Carry",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
      in_c: true,
    },
    NOPP: {instruction: "No Operation", cycles: [7], interruptible: true},
    BNC: {
      instruction: "Branch on No Carry",
      cycles: [7, 9],
      interruptible: true,
      in_c: true,
    },
    BNOV: {
      instruction: "Branch on No Overflow",
      cycles: [7, 9],
      interruptible: true,
      in_o: true,
    },
    BMI: {
      instruction: "Branch on Minus",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
    },
    BNEQ: {
      instruction: "Branch If Not Equal / Branch If Not Zero",
      cycles: [7, 9],
      interruptible: true,
      in_z: true,
    },
    BGE: {
      instruction: "Branch if Greater Than or Equal / Branch if Not Less Than",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
      in_o: true,
    },
    BGT: {
      instruction: "Branch if Greater Than / Branch if Not Less Than or Equal",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
      in_z: true,
      in_o: true,
    },
    BESC: {
      instruction: "Branch on Equal Sign and Carry",
      cycles: [7, 9],
      interruptible: true,
      in_s: true,
      in_c: true,
    },
    BEXT: {
      instruction: "Branch on External",
      cycles: [7, 9],
      interruptible: true,
    },
  },
  "0240-0247": {
    MVO: {instruction: "Move Out", cycles: [11], interruptible: false},
  },
  "0248-026f": {
    "MVO@": {
      instruction: "Move Out Indirect",
      cycles: [9],
      interruptible: false,
      in_d: true,
    },
  },
  "0270-027f": {
    MVOI: {
      instruction: "Move Out Immediate",
      cycles: [9],
      interruptible: false,
      in_d: true,
    },
  },
  "0280-0287": {
    MVI: {instruction: "Move In", cycles: [10], interruptible: true},
  },
  "0288-02af": {
    "MVI@": {
      instruction: "Move In Indirect",
      cycles: [8, 10, 11],
      interruptible: true,
      in_d: true,
    },
  },
  "02b0-02bf": {
    MVII: {
      instruction: "Move In Immediate",
      cycles: [8, 10],
      interruptible: true,
      in_d: true,
    },
  },
  "02c0-02c7": {
    ADD: {
      instruction: "Add",
      cycles: [10],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "02c8-02ef": {
    "ADD@": {
      instruction: "Add Indirect",
      cycles: [8, 10, 11],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "02f0-02ff": {
    ADDI: {
      instruction: "Add Immediate",
      cycles: [8, 10],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0300-0307": {
    SUB: {
      instruction: "Subtract",
      cycles: [10],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0308-032f": {
    "SUB@": {
      instruction: "Subtract Indirect",
      cycles: [8, 10, 11],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0330-033f": {
    SUBI: {
      instruction: "Subtract Immediate",
      cycles: [8, 10],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0340-0347": {
    CMP: {
      instruction: "Compare",
      cycles: [10],
      interruptible: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0348-036f": {
    "CMP@": {
      instruction: "Compare Indirect",
      cycles: [8, 10, 11],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0370-037f": {
    CMPI: {
      instruction: "Compare Immediate",
      cycles: [8, 10],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
      out_o: true,
      out_c: true,
    },
  },
  "0380-0387": {
    AND: {
      instruction: "And",
      cycles: [10],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "0388-03af": {
    "AND@": {
      instruction: "And Indirect",
      cycles: [8, 10, 11],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
    },
  },
  "03b0-03bf": {
    ANDI: {
      instruction: "And Immediate",
      cycles: [8, 10],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
    },
  },
  "03c0-03c7": {
    XOR: {
      instruction: "Xor",
      cycles: [10],
      interruptible: true,
      out_s: true,
      out_z: true,
    },
  },
  "03c8-03ef": {
    "XOR@": {
      instruction: "Xor Indirect",
      cycles: [8, 10, 11],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
    },
  },
  "03f0-03ff": {
    XORI: {
      instruction: "Xor Immediate",
      cycles: [8, 10],
      interruptible: true,
      in_d: true,
      out_s: true,
      out_z: true,
    },
  },
} as const;
